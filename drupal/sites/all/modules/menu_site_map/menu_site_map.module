<?php
// $Id: menu_site_map.module,v 1.1.2.1 2009/11/30 15:50:05 ghing Exp $

/** 
 * @file
 *
 * Implementation of module hooks and utility functions for the Menu Site Map module.
 */

/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function menu_site_map_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#menu_site_map":
       $output = '<p>' . t("Displays a site map generated from a menu") . '</p>';
       break;
  }
  return $output;
} // function menu_site_map

/**
 * Implementation of hook_menu().
 */
function menu_site_map_menu() {
  $items['admin/settings/sitemap/menu_sitemap'] = array(
    'title' => 'Menu site map',
    'description' => 'Control which menu(s) should be displayed on the site map and the depth of the menus.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_site_map_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'menu_site_map.admin.inc',  
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/sitemap/menu_sitemap/general'] = array(
    'title' => 'General',
    'description' => 'Control which menu(s) should be displayed on the site map and the depth of the menus.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_site_map_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'menu_site_map.admin.inc',  
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/settings/sitemap/menu_sitemap/select_links'] = array(
    'title' => 'Select site map menu links',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_site_map_select_menu_links_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'menu_site_map.admin.inc',  
    'weight' => 1,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function menu_site_map_theme() {
  return array(
    'menu_site_map_settings_form' => array(
      'file' => 'menu_site_map.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'menu_site_map_select_menu_links_form' => array(
      'file' => 'menu_site_map.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'menu_site_map_item_container_open' => array(
      'arguments' => array('depth' => NULL, 'is_first' => FALSE),
    ),
    'menu_site_map_item_container_close' => array(
      'arguments' => array('depth' => NULL,),
    ),
    'menu_site_map_children_container_open' => array(
      'arguments' => array('depth' => NULL,),
    ),
    'menu_site_map_children_container_close' => array(
      'arguments' => array('depth' => NULL,),
    ),
    'menu_site_map_item' => array(
      'arguments' => array('title' => NULL, 'link' => NULL, 'depth' => NULL),
    ),
    'menu_site_map_menu' => array(
      'arguments' => array('menu_tree' => NULL, 'max_depth' => NULL),
    ),
    'menu_site_map_menu_tree' => array(
      'arguments' => array('menu_tree' => NULL, 'current_depth' => NULL, 
                           'max_depth' => NULL),
    ),
    'menu_site_map_item_link' => array(
      'arguments' => array('link' => NULL),
    ),
  );
} // function menu_site_map_theme


/**
 * Theme the opening markeup a menu item's container.
 *
 * This is just a wrapper for the internal theme functions.
 */
function theme_menu_site_map_item_container_open($depth, $is_first = FALSE, $leaf = FALSE) { 
  $output = '';
  $display_style = variable_get('menu_site_map_display_style', 'default');
  if ($display_style == 'lists') {
    // Theme in a way that wraps menu items in nested lists
    $output .= _theme_menu_site_map_item_container_open_lists($depth, $is_first, $leaf);
  }
  else if ($display_style == 'theme') {
    // If this setting was selected, you should never get here
    // because this function should be overridden in the theme.
    // Output a message about this to help people understand.
    $output .= '<p>' . t('You need to implement theme_menu_site_map_container_open in your theme!') . '</p>';
  }
  else {
    // Default
    $output .= _theme_menu_site_map_item_container_open_default($depth, $is_first, $leaf);
  }
  return $output;
}

/**
 * Theme the opening markeup a menu item's container in such a way that the 
 * first and second levels are wrapped in divs.
 */
function _theme_menu_site_map_item_container_open_default($depth, $is_first = FALSE, $leaf = FALSE) { 
  $output = '';
  if ($depth == 0) {
    $output .= sprintf("<div class=\"container level-%s%s\">\n", 
                        $depth,
                        $is_first ? ' first' : '');
  }
  else if ($depth == 1) {
    $output .= sprintf("<div class=\"container level-%s%s\">\n", 
                        $depth,
                        $is_first ? ' first' : '');
  }
  else if ($depth >= 2) {
  }
  else {
  }

  return $output;
}

function _theme_menu_site_map_item_container_open_lists($depth, $is_first = FALSE, $leaf = FALSE) { 
  $output = '';
 
  if (!$leaf) {
    $output .= sprintf("<li class=\"level-%s%s\">\n", 
                       $depth,
                       $is_first ? ' first' : ''); 
  }

  return $output;
}

/** 
 * Theme the closing markup for a menu item's container.
 *
 * This is just a wrapper for the internal theme functions.
 */
function theme_menu_site_map_item_container_close($depth, $leaf = FALSE) {
  $output = '';
  $display_style = variable_get('menu_site_map_display_style', 'default');
  if ($display_style == 'lists') {
    // Theme in a way that wraps menu items in nested lists
    $output .= _theme_menu_site_map_item_container_close_lists($depth, $leaf);
  }
  else if ($display_style == 'theme') {
    // If this setting was selected, you should never get here
    // because this function should be overridden in the theme.
    // Output a message about this to help people understand.
    $output .= '<p>' . t('You need to implement theme_menu_site_map_container_close in your theme!') . '</p>';
  }
  else {
    // Default
    $output .= _theme_menu_site_map_item_container_close_default($depth);
  }
  return $output;
}

/**
 * Theme the closing markeup a menu item's container in such a way that the 
 * first and second levels are wrapped in divs.
 */
function _theme_menu_site_map_item_container_close_default($depth, $leaf = FALSE) {
  $output = '';

  if ($depth == 0) {
    $output .= "<div class=\"clear-block\"></div>\n";
    $output .= "</div>\n";
  }
  else if ($depth == 1) {
   $output .= "<div class=\"clear-block\"></div>\n";
   $output .= "</div>\n";
  }
  else if ($depth >= 2) {
  }
  else {
  }

  return $output;
}

function _theme_menu_site_map_item_container_close_lists($depth, $leaf = FALSE) {
  $output = '';

  if (!$leaf) {
    $output .= "</li>\n";
  }

  return $output;
}

/**
 * Theme the opening markup for the container of a menu item's children.
 *
 * This is just a wrapper for the internal theme functions.
 */
function theme_menu_site_map_children_container_open($depth) {
  $output = '';
  $display_style = variable_get('menu_site_map_display_style', 'default');
  if ($display_style == 'lists') {
    // Theme in a way that wraps menu items in nested lists
    $output = _theme_menu_site_map_children_container_open_lists($depth);
  }
  else if ($display_style == 'theme') {
    // If this setting was selected, you should never get here
    // because this function should be overridden in the theme.
    // Output a message about this to help people understand.
    $output .= '<p>' . t('You need to implement theme_menu_site_map_children_container_open in your theme!') . '</p>';
  }
  else {
    // Default
    $output = _theme_menu_site_map_children_container_open_default($depth);
  }
    return $output;
}

/**
 * Default theming for the opening markup for the container of a menu item's 
 * children. 
 *
 * The first and second level's children are not wrapped (as 
 * the heading and container output by _theme_menu_site_map_children_container_open_default()
 * handles this).  The third and fourth level menus are output as lists.
 */
function _theme_menu_site_map_children_container_open_default($depth) {
    $output = '';

    if ($depth == 0) {
    }
    else if ($depth == 1) {
    }
    else if ($depth == 2) {
      $output .= sprintf("<ul class=\"container level-%s\">\n", $depth);
    }
    else {
      // $depth >= 3
      $output .= sprintf("<ul class=\"container level-%s\">\n", $depth);
    }

    return $output;
}

function _theme_menu_site_map_children_container_open_lists($depth) {
  $output = '';

  if ($depth == 0) {
    $output .= sprintf("<ul class=\"container level-%s\">\n", $depth);
  }
  else if ($depth == 1) {
    $output .= sprintf("<ul class=\"container level-%s\">\n", $depth);
  }
  else if ($depth == 2) {
    $output .= sprintf("<ul class=\"container level-%s\">\n", $depth);
  }
  else {
    // $depth >= 3
    $output .= sprintf("<ul class=\"container level-%s\">\n", $depth);
  }

  return $output;
}

/**
 * Theme the closing markup for the container of a menu item's children.
 *
 * This is just a wrapper for the internal theme functions.
 */
function theme_menu_site_map_children_container_close($depth) {
  $output = '';
  $display_style = variable_get('menu_site_map_display_style', 'default');
  if ($display_style == 'lists') {
    // Theme in a way that wraps menu items in nested lists
    $output = _theme_menu_site_map_children_container_close_lists($depth);
  }
  else if ($display_style == 'theme') {
    // If this setting was selected, you should never get here
    // because this function should be overridden in the theme.
    // Output a message about this to help people understand.
    $output .= '<p>' . t('You need to implement theme_menu_site_map_children_container_close in your theme!') . '</p>';
  }
  else {
    // Default
    $output = _theme_menu_site_map_children_container_close_default($depth);
  }
  return $output;
}

/**
 * Default theming for the closing markup for the container of a menu item's 
 * children. 
 *
 * The first and second level's children are not wrapped (as 
 * the heading and container output by _theme_menu_site_map_children_container_close_default()
 * handles this).  The third and fourth level menus are output as lists.
 */
function _theme_menu_site_map_children_container_close_default($depth) {
  $output = '';

  if ($depth == 0) {
  }
  else if ($depth == 1) {
  }
  else if ($depth == 2) {
    $output .= "</ul>\n";
  }
  else {
    // $depth >= 3
    $output .= "</ul>\n";
  }

  return $output;
}

function _theme_menu_site_map_children_container_close_lists($depth) {
  $output = '';

  if ($depth == 0) {
    $output .= "</ul>\n";
  }
  else if ($depth == 1) {
    $output .= "</ul>\n";
  }
  else if ($depth == 2) {
    $output .= "</ul>\n";
  }
  else {
    // $depth >= 3
    $output .= "</ul>\n";
  }

  return $output;
}

/**
 * Theme a single menu entry in the site map.
 *
 * This is just a wrapper for the internal theme functions.
 */
function theme_menu_site_map_item($link, $depth, $leaf=FALSE) {
  $output = '';
  $display_style = variable_get('menu_site_map_display_style', 'default');
  if ($display_style == 'lists') {
    // Theme in a way that wraps menu items in nested lists
    $output .= _theme_menu_site_map_item_lists($link, $depth, $leaf);
  }
  else if ($display_style == 'theme') {
    // If this setting was selected, you should never get here
    // because this function should be overridden in the theme.
    // Output a message about this to help people understand.
    $output .= '<p>' . t('You need to implement theme_menu_site_map_item in your theme!') . '</p>';
  }
  else {
    // Default
    $output .= _theme_menu_site_map_item_default($link, $depth, $leaf);
  }

  return $output;
} // function theme_menu_site_map_item

/**
 * Default theming of a single menu entry in the site map.
 *
 * First and second level menus get themed as headers, third and lower become lis.
 */
function _theme_menu_site_map_item_default($link, $depth, $leaf=FALSE) {
  $output = '';
  $class = sprintf("item level-%s%s",
                   $depth,
                   $leaf ? " leaf" : "");
  if ($depth == 0) {
    $output .= sprintf("<h2 class=\"%s\">%s</h2>\n", $class, $link); 
  }
  else if ($depth == 1) {
    $output .= sprintf("<h3 class=\"%s\">%s</h3>\n", $class, $link); 
  }
  else if ($depth >= 2) {
    $output .= sprintf("<li class=\"%s\">%s</li>\n", $class, $link); 
  }

  return $output;
} // function theme_menu_site_map_item


function _theme_menu_site_map_item_lists($link, $depth, $leaf=FALSE) {
  $output = '';
  $class = sprintf("item level-%s%s",
                   $depth,
                   $leaf ? " leaf" : "");
  if ($leaf) {
    $output .= "<li class=\"$class\">";
  }

  if ($depth == 0) {
    $output .= $link; 
  }
  else if ($depth == 1) {
    $output .= $link; 
  }
  else if ($depth >= 2) {
    $output .= $link; 
  }

  if ($leaf) {
    $output .= "</li>";
  }

  return $output;
}

function theme_menu_site_map_item_link($link) {
  if (empty($link['localized_options'])) {
    $link['localized_options'] = array();
  }

  return l($link['title'], $link['href'], $link['localized_options']);
}

/**
 * Theme the wrapper for the menu portion of the site map.
 */
function theme_menu_site_map_menu($menu_tree, $max_depth) {
  $output = '';
  $display_style = variable_get('menu_site_map_display_style', 'default');
  if ($display_style == 'lists') {
    // Theme in a way that wraps menu items in nested lists
    $output .= _theme_menu_site_map_menu_lists($menu_tree, $max_depth);
  }
  else if ($display_style == 'theme') {
    // If this setting was selected, you should never get here
    // because this function should be overridden in the theme.
    // Output a message about this to help people understand.
    $output .= '<p>' . t('You need to implement theme_menu_site_map_menu in your theme!') . '</p>';
  }
  else {
    // Default
    $output .= _theme_menu_site_map_menu_default($menu_tree, $max_depth);
  }
  
  return $output;
}

/**
 * Theme the wrapper for the menu portion of the site map by wrapping it in a div.
 */
function _theme_menu_site_map_menu_default($menu_tree, $max_depth) {
  $output = '';
  $output .= "\n";
  $output .= "<div class=\"menu-site-map menu-site-map-default\">\n";
  $output .= theme('menu_site_map_menu_tree', $menu_tree, 0, $max_depth);
  $output .= "</div>\n";

  return $output;
}

/**
 * Theme the wrapper for the menu portion of the site map by wrapping it in a list.
 */
function _theme_menu_site_map_menu_lists($menu_tree, $max_depth) {
  $output = '';
  
  $output .= "\n";
  $output .= "<ul class=\"menu-site-map menu-site-map-lists\">\n";
  $output .= theme('menu_site_map_menu_tree', $menu_tree, 0, $max_depth);
  $output .= "</ul>\n";

  return $output;
}

/**
 * Theme a menu tree for output in a site map.
 */
function theme_menu_site_map_menu_tree($menu_tree, $current_depth, $max_depth) {
  $output = ''; 
  $delayed_output = '';

  if ($current_depth > $max_depth) {
    return NULL;
  }
  else {
    $is_first = TRUE;

    foreach ($menu_tree as $menu) {
      $smm_item = db_fetch_array(db_query("SELECT * FROM {menu_site_map_links} WHERE mlid = %d", $menu['link']['mlid']));  
      if (!$smm_item || $smm_item['included']) {
        // We haven't excluded this menu item from our site map.

        // Is this menu item as deep as we're going to go down our menu tree?
        // This would be either because the item has no children or descending
        // further down the tree would result in exceeding the max depth.
        $leaf = !$menu['link']['has_children'] || $current_depth + 1 > $max_depth;

        $output .= theme('menu_site_map_item_container_open', $current_depth, $is_first, $leaf);

        $link = theme('menu_site_map_item_link', $menu['link']);
        $item_output = theme('menu_site_map_item', 
                             $link, 
                             $current_depth, $leaf);
        $move_second_level_leafs = variable_get('menu_site_map_move_second_level_leafs', FALSE);
        if ($current_depth == 1 && !$menu['link']['has_children'] &&
            $move_second_level_leafs == TRUE) {
          // Put all single-item second level menus at the end, after those with children
          $delayed_output .= $item_output; 
        }
        else {  
          $output .= $item_output; 
        }

        if ($menu['link']['has_children']) {
          $output .= theme('menu_site_map_children_container_open', $current_depth + 1);
          $output .= theme('menu_site_map_menu_tree', $menu['below'], $current_depth + 1, $max_depth);
          $output .= theme('menu_site_map_children_container_close', $current_depth + 1);
        }

        $output .= theme('menu_site_map_item_container_close', $current_depth, $leaf);

        if ($is_first) {
          $is_first = FALSE;
        }
      }
    } // foreach
   
    $output .= $delayed_output;


    return $output;
  }
} 

function menu_site_map_tree_all_data($menu_name) {
  $menu_tree = menu_tree_all_data($menu_name);
  // This is how the default module handles internationalization
  if (module_exists('i18nmenu')) {
    i18nmenu_localize_tree($menu_tree);
  }
  $altered_menu_tree = $menu_tree;
  $menu_alterations = array();
  $result = db_query("SELECT * FROM {menu_site_map_links} WHERE menu_name = '%s'", $menu_name);  
  while ($item = db_fetch_array($result)) {
    $menu_alterations[$item['mlid']] = $item;
  }
   
  return $altered_menu_tree;
}

/**
 * Implementation of hook_site_map().
 *
 * This allows for integration with the regular Site Map module.
 */
function menu_site_map_site_map() {
  $output = '';
  drupal_add_css(drupal_get_path('module', 'menu_site_map') . '/menu_site_map.css');
  $site_map_menus = variable_get('menu_site_map_menus', null);

  if (count($site_map_menus) > 0) {
    uasort($site_map_menus, "_menu_site_map_menus_cmp_weight");
    $max_depth = variable_get('menu_site_map_menu_depth', 2);

    foreach ($site_map_menus as $name => $site_map_menu) {
      if ($site_map_menu['included']) {
        $menu = menu_load($name);
        $menu_tree = menu_site_map_tree_all_data($name);

        $output .= theme('menu_site_map_menu', $menu_tree, $max_depth);
      }
    }
  }

  return $output;
} // function menu_site_map_site_map

function _menu_site_map_menus_cmp_weight($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

