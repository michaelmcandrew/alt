<?php

/**
 * @file
 * Comment moderation module. Enables comment moderation on
 * individual nodes. Useful to reduce the number of low-quality
 * comments on popular nodes while still allowing normal commenting
 * on all other content.
 */

/**
 * Implementation of hook_perm().
 */
function node_comment_moderate_perm() {
  return array('bypass per-node comment moderation');
}

/**
 * Implementation of hook_menu().
 */
function node_comment_moderate_menu() {
  $items = array();

  $items['admin/settings/node_comment_moderate'] = array(
    'title' => 'Per-node Comment Moderation',
    'description' => 'Configure selective comment moderation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_comment_moderate_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *
 * Adds comment moderation status to nodes.
 */
function node_comment_moderate_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'load':
      return db_fetch_array(db_query('SELECT moderate AS moderate_comments FROM {node_comment_moderate} WHERE nid = %d', $node->nid));
      break;
    case 'insert':
    case 'update':
      db_query('UPDATE {node_comment_moderate} SET moderate = %d WHERE nid = %d', $node->moderate_comments, $node->nid);
      if (!db_affected_rows()) {
        @db_query('INSERT INTO {node_comment_moderate} (nid, moderate) VALUES (%d, %d)', $node->nid, $node->moderate_comments);
      }
      break;
    case 'delete':
      db_query('DELETE FROM {node_comment_moderate} WHERE nid = %d', $node->nid);
      break;
  }
}

/**
 * Add an option to toggle comment moderation on the node edit form.
 */
function node_comment_moderate_form_alter(&$form, $form_state, $form_id) {

  if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
    // Add a comment moderation setting to all node edit pages.
    // @TODO: allow this to be enabled for selected node types only.
    $form['comment_settings']['moderate_comments'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable comment moderation'),
        '#default_value' => !empty($form['#node']->moderate_comments) ? $form['#node']->moderate_comments : 0,
    );
  }

  if ($form_id == 'comment_form') {
    // Add a notification message to the comment form. Might
    // scare off some of the human spammers.
    if (variable_get('node_comment_moderate_warning', 1) && node_comment_moderate_moderated($form['nid']['#value'])) {
      $form['comment_filter']['comment']['#prefix'] = '<div class="messages status">'. t("Note: Comment moderation is enabled on this page. Your comment will only be visible once approved by the administrators.") .'</div>';
    }
  }
}

/**
 * Implementation of hook_comment().
 */
function node_comment_moderate_comment(&$comment, $op) {
  if ($op == 'insert') {
    if (node_comment_moderate_moderated($comment['nid'])) {
      // comment moderation is enabled for this node, unpublish it.
      $comment_ops = comment_operations('unpublish');
      db_query($comment_ops['unpublish'][1], $comment['cid']);

      // also update the status field so that the end user is
      // notified that the comment is pending approval.
      $comment['status'] = COMMENT_NOT_PUBLISHED;
    }
  }
}

/**
 * Generate module settings form.
 */
function node_comment_moderate_admin_settings() {
  $form = array();

  $form['node_comment_moderate_warning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add a warning message to the comment form'),
    '#description' => t('Adds a simple warning message saying that comment moderation is enabled, to discourage spammers. If you want to customize this message, consider using the <a href="!warning-url">warning module</a>.', array('!warning-url' => 'http://drupal.org/project/warning')),
    '#default_value' => variable_get('node_comment_moderate_warning', 1),
  );

  return system_settings_form($form);
}

/**
 * Check if comment moderation is enabled for the current user on
 * a given node-ID.
 *
 * @param  int $node  The node ID to test.
 *
 * @return bool   TRUE if comment moderation is enabled,
 *                FALSE otherwise.
 */
function node_comment_moderate_moderated($nid) {
  if (user_access('bypass per-node comment moderation') || user_access('administer comments')) {
    // User is permitted to submit unmoderated comments.
    return FALSE;
  }

  $node = node_load($nid);
  return isset($node->moderate_comments) ? $node->moderate_comments : FALSE;
}
